 #include "TTree.h"
#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TCanvas.h"
#include "TMath.h"
#include "TRandom3.h"
#include <iostream>
#include <sstream>
#include "THStack.h"


//1 background at a time

void scdbgd(){
  TFile* file = new TFile("radbhabhafullvac.root");

  TTree* tree = (TTree *)file->Get("Check");

  int nEvents= tree->GetEntries();
  
  TH1D* charge = new TH1D("charge", "Charge of Particles", 5, -2.5, 2.5);
  TH1D* zpos = new TH1D("zpos", "Z Position of Origin", 110, -1, 10);
  TH1D* xpos = new TH1D("xpos", "X Position of Origin", 200, -2, 2);
  TH1D* ypos = new TH1D("ypos", "Y Position of Origin", 200, -2, 2);
  TH2D* dist = new TH2D("dist", "R v. Z Position of Origin", 110, -1, 10, 100, 0, 1);
  TH2D* eng = new TH2D("eng", "Energy distribution in Z", 11, -1, 10, 500, 0, 1000);
  TH1D* engDist = new TH1D("engDist", "Energy Distribution Of Secondary Particles", 100, 0, 100);
   TH1D* engDist2 = new TH1D("engDist2", "Energy Distribution Of Secondary Particles", 25, 0, 25);
  TH2D* tar = new TH2D("tar", "Target Position", 100, -1, 1, 100, -1, 1);

 engDist->SetStats("nemo");
 engDist->StatOverflows(kTRUE);
 engDist2->StatOverflows(kTRUE);
 engDist2->SetStats("nemo");

 double q1;
  double x1, y1, z1;
  double eng1;
  double tx1, tx2, ty1, ty2, tx3, ty3, tx4, ty4;
 

  tree->SetBranchAddress("Charge", &q1);
  tree->SetBranchAddress("StartPosX", &x1);
  tree->SetBranchAddress("StartPosY", &y1);
  tree->SetBranchAddress("StartPosZ", &z1);
  tree->SetBranchAddress("TarX", &tx1);
  tree->SetBranchAddress("TarY", &ty1);
  tree->SetBranchAddress("Energy", &eng1);
  tree->SetBranchAddress("TarX", &tx4);
  tree->SetBranchAddress("TarY", &ty4);

  int chargeCount=0;
  int chargeCountE=0;
  int gammaCount=0;
  int gammaCountE=0;

  for (int k=0; k<nEvents; k++)
    {
      tree->GetEntry(k);
      if (eng1>5){
      if (pow(q1, 2)>.5) {
      charge->Fill(q1, .0038);
      zpos->Fill(z1/1000+5, .0038);
      xpos->Fill(x1/1000, .0038);
      ypos->Fill(y1/1000, .0038);
      double R = pow(pow(y1/1000, 2)+pow(x1/1000, 2), .5);
      dist->Fill(z1/1000+5, R, .0038);
      eng->Fill(z1/1000+5, eng1, .0038);
      tar->Fill(tx1/1000, ty1/1000, .0038);
      if(z1>-4990){
	cout << z1 << endl;
      engDist->Fill(eng1, .0038);
      engDist2->Fill(eng1, .0038);
      chargeCount++;}
      }
      gammaCount++;}
    }

  cout << "2 Gamma charged particles: " << chargeCount << endl;
  cout << "2 Gamma photons: " <<gammaCount << endl;
  chargeCount=0;
  gammaCount=0;

 


  TPad* p;
  TCanvas* canvas = new TCanvas("canvas", "canvas", 700,700);
  canvas->Divide(1, 3);
    
  canvas->cd(1);
  eng->Draw("BOX");
  
  p=(TPad*)canvas->cd(2);
  p->SetLogy();
  p->SetGrid();
  zpos->Draw();

  canvas->cd(1);
  engDist->Draw();

  canvas->cd(2);
  engDist2->Draw();

  /*
  p=(TPad*)canvas->cd(3);
  p->SetLogy();
  p->SetGrid();
  xpos->SetFillColor(kBlue);
  xpos->SetFillStyle(3001);
  xpos->Draw();

  p=(TPad*)canvas->cd(4);
  p->SetLogy();
  p->SetGrid();
  ypos->SetFillColor(kBlue);
  ypos->SetFillStyle(3001);
  ypos->Draw();
  */

    canvas->cd(3);
  dist->Draw("BOX");

  /*
  canvas->cd(6);
  tar->Draw("");


  TCanvas* bgd = new TCanvas("bgd", "canvas", 700, 700);
  canvas->Divide(4, 1);
*/
  
  
  
  

}
