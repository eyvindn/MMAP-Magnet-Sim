 #include "TTree.h"
#include "TFile.h"
#include "TH1.h"
#include "TCanvas.h"
#include "TMath.h"
#include "TRandom3.h"
#include <iostream>
#include <sstream>

void secondaries(){
  TFile* file = new TFile("2gamma5k.root");
  TFile* file1 = new TFile("3gamma5k.root");
  TFile* file2 = new TFile("radBhaba5k.root");
  TFile* file3 = new TFile("bhabha5k.root");

  TTree* tree = (TTree *)file->Get("Check");
  TTree* tree1 = (TTree *)file1->Get("Check");
  TTree* tree2 = (TTree *)file2->Get("Check");
  TTree* tree3 = (TTree *)file3->Get("Check");

  int nEvents= tree->GetEntries();
  int nEvents1=tree1->GetEntries();
  int nEvents2=tree2->GetEntries();
  int nEvents3=tree3->GetEntries();
  
  TH1D* charge = new TH1D("charge", "Charge of Particles", 5, -2.5, 2.5);
  TH1D* Zpos = new TH1D("zpos", "Z Position of Origin", 200, -1, 10);
  TH1D* xpos = new TH1D("xpos", "X Position of Origin", 200, -2, 2);
  TH1D* ypos = new TH1D("ypos", "Y Position of Origin", 200, -2, 2);

  double q1, q2, q3, q4;
  double x1, x2, x3, x4, y1, y2, y3, y4,  z1, z2, z3, z4;

  tree->SetBranchAddress("Charge", &q1);
  tree->SetBranchAddress("StartPosX", &x1);
  tree->SetBranchAddress("StartPosY", &y1);
  tree->SetBranchAddress("StartPosZ", &z1);
  tree1->SetBranchAddress("Charge", &q2);
  tree1->SetBranchAddress("StartPosX", &x2);
  tree1->SetBranchAddress("StartPosY", &y2);
  tree1->SetBranchAddress("StartPosZ", &z2);
  tree2->SetBranchAddress("Charge", &q3);
  tree2->SetBranchAddress("StartPosX", &x3);
  tree2->SetBranchAddress("StartPosY", &y3);
  tree2->SetBranchAddress("StartPosZ", &z3);
  tree3->SetBranchAddress("Charge", &q4);
  tree3->SetBranchAddress("StartPosX", &x4);
  tree3->SetBranchAddress("StartPosY", &y4);
  tree3->SetBranchAddress("StartPosZ", &z4);

  for (int k=0; k<nEvents; k++)
    {
      tree->GetEntry(k);
      charge->Fill(q1, .0038);
      Zpos->Fill(z1*1000+5, .0038);
      xpos->Fill(x1*1000, .0038);
      ypos->Fill(y1*1000, .0038);
    }

  for (int k=0; k<nEvents1; k++)
    {
      tree1->GetEntry(k);
      charge->Fill(q2, .001);
      Zpos->Fill(z2*1000, .001);
      xpos->Fill(x2*1000, .001);
      ypos->Fill(y2*1000, .001);
    }

  for (int k=0; k<nEvents2; k++)
    {
      tree2->GetEntry(k);
      charge->Fill(q3, .214);
      Zpos->Fill(z3*1000+5, .214);
      xpos->Fill(x3*1000., .214);
      ypos->Fill(y3*1000., .214);
    }

  for (int k=0; k<nEvents3; k++)
    {
      tree3->GetEntry(k);
      charge->Fill(q4, .781);
      Zpos->Fill(z4*1000.+5, .781);
      xpos->Fill(x4*1000, .781);
      ypos->Fill(y4*1000, .781);
    }

   TPad* p;
  TCanvas* canvas = new TCanvas("canvas", "canvas", 700,700);
  canvas->Divide(2, 2);
  canvas->cd(1);
  charge->Draw();

  p=(TPad*)canvas->cd(2);
  p->SetLogy();
  p->SetGrid();
  Zpos->SetFillColor(kBlue);
  Zpos->SetFillStyle(3001);
  Zpos->Draw();

  p=(TPad*)canvas->cd(3);
  p->SetLogy();
  p->SetGrid();
  xpos->SetFillColor(kBlue);
  xpos->SetFillStyle(3001);
  xpos->Draw();

  p=(TPad*)canvas->cd(4);
  p->SetLogy();
  p->SetGrid();
  ypos->SetFillColor(kBlue);
  ypos->SetFillStyle(3001);
  ypos->Draw();
  
  
  
  


}
